---
- name: "get users HOME"
  getent:
    database: passwd
    key: "{{ asdf_user }}"
    split: ":"
  when: asdf_dir is undefined

- name: "set asdf_config_file based on home directory"
  set_fact:
    asdf_config_file: "{{ getent_passwd[asdf_user][4] }}/.asdfrc"
  when: asdf_dir is undefined and asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file based on home directory"
  set_fact:
    asdf_default_tool_versions_file: "{{ getent_passwd[asdf_user][4] }}/.tool-versions"
  when: asdf_dir is undefined and asdf_default_tool_versions_file is undefined

- name: "set asdf_dir variable based on home directory"
  set_fact:
    asdf_dir: "{{ getent_passwd[asdf_user][4] }}/.asdf"
  when: asdf_dir is undefined

- name: "set asdf_config_file variable based on asdf_dir"
  set_fact:
    asdf_config_file: "{{ asdf_dir }}/asdfrc"
  when: asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file variable based on asdf_dir"
  set_fact:
    asdf_default_tool_versions_file: "{{ asdf_dir }}/tool-versions"
  when: asdf_default_tool_versions_file is undefined

- name: "install asdf global dependencies with apt"
  apt:
    name: "{{ asdf_apt_global_dependencies }}"
    install_recommends: no
    cache_valid_time: "{{ apt_cache_valid_time }}"
  become: True
  retries: "{{ remote_package_retries }}"
  register: apt_deps_result
  until: apt_deps_result is succeeded
  when: ansible_os_family == "Debian"

- name: "install asdf global dependencies with yum"
  yum:
    name: "{{ asdf_yum_global_dependencies }}"
  become: True
  retries: "{{ remote_package_retries }}"
  register: yum_deps_result
  until: yum_deps_result is succeeded
  when: ansible_os_family == "RedHat"

- name: "install asdf global dependencies with pacman"
  pacman:
    name: "{{ asdf_pacman_global_dependencies }}"
    state: present
  become: True
  retries: "{{ remote_package_retries }}"
  register: pacman_deps_result
  until: pacman_deps_result is succeeded
  when: ansible_os_family == "Archlinux"

- name: "ensure asdf_dir presence and ownership"
  file:
    path: "{{ asdf_dir }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    state: directory
  become: True

- name: "clone asdf repository"
  git:
    repo: "https://github.com/asdf-vm/asdf.git"
    dest: "{{ asdf_dir }}"
    version: "{{ asdf_version }}"
    depth: 1
  become: True
  become_user: "{{ asdf_user }}"

- name: "install Go for building asdf (Debian)"
  apt:
    name: "golang-go"
    state: present
    cache_valid_time: "{{ apt_cache_valid_time }}"
  become: True
  when: ansible_os_family == "Debian"

- name: "install Go for building asdf (Arch)"
  pacman:
    name: "go"
    state: present
  become: True
  when: ansible_os_family == "Archlinux"

- name: "build asdf from source"
  command: "make build"
  args:
    chdir: "{{ asdf_dir }}"
    creates: "{{ asdf_dir }}/asdf"
  become: True
  become_user: "{{ asdf_user }}"
  environment:
    PATH: "/usr/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: "create asdf bin symlink directory"
  file:
    path: "/usr/local/bin"
    state: directory
    mode: 0755
  become: True

- name: "symlink asdf binary to /usr/local/bin"
  file:
    src: "{{ asdf_dir }}/asdf"
    dest: "/usr/local/bin/asdf"
    state: link
    force: yes
  become: True

- name: "source asdf script"
  template:
    src: "asdf.sh.j2"
    dest: "/etc/profile.d/asdf.sh"
    owner: "root"
    group: "root"
    mode: 0755
  become: True
