---
- name: "get users HOME"
  getent:
    database: passwd
    key: "{{ asdf_user }}"
    split: ":"
  when: asdf_dir is undefined

- name: "set asdf_config_file based on home directory"
  set_fact:
    asdf_config_file: "{{ getent_passwd[asdf_user][4] }}/.asdfrc"
  when: asdf_dir is undefined and asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file based on home directory"
  set_fact:
    asdf_default_tool_versions_file: "{{ getent_passwd[asdf_user][4] }}/.tool-versions"
  when: asdf_dir is undefined and asdf_default_tool_versions_file is undefined

- name: "set asdf_dir variable based on home directory"
  set_fact:
    asdf_dir: "{{ getent_passwd[asdf_user][4] }}/.asdf"
  when: asdf_dir is undefined

- name: "set asdf_config_file variable based on asdf_dir"
  set_fact:
    asdf_config_file: "{{ asdf_dir }}/asdfrc"
  when: asdf_config_file is undefined

- name: "set asdf_default_tool_versions_file variable based on asdf_dir"
  set_fact:
    asdf_default_tool_versions_file: "{{ asdf_dir }}/tool-versions"
  when: asdf_default_tool_versions_file is undefined

- name: "install asdf global dependencies with apt"
  apt:
    name: "{{ asdf_apt_global_dependencies }}"
    install_recommends: no
    cache_valid_time: "{{ apt_cache_valid_time }}"
  become: True
  retries: "{{ remote_package_retries }}"
  register: apt_deps_result
  until: apt_deps_result is succeeded
  when: ansible_os_family == "Debian"

- name: "install asdf global dependencies with yum"
  yum:
    name: "{{ asdf_yum_global_dependencies }}"
  become: True
  retries: "{{ remote_package_retries }}"
  register: yum_deps_result
  until: yum_deps_result is succeeded
  when: ansible_os_family == "RedHat"

- name: "install asdf global dependencies with pacman"
  pacman:
    name: "{{ asdf_pacman_global_dependencies }}"
    state: present
  become: True
  retries: "{{ remote_package_retries }}"
  register: pacman_deps_result
  until: pacman_deps_result is succeeded
  when: ansible_os_family == "Archlinux"

- name: "ensure asdf_dir presence and ownership"
  file:
    path: "{{ asdf_dir }}"
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
    state: directory
  become: True

- name: "detect system architecture"
  set_fact:
    asdf_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}"

- name: "detect system OS"
  set_fact:
    asdf_os: "{{ 'linux' if ansible_system == 'Linux' else 'darwin' if ansible_system == 'Darwin' else ansible_system | lower }}"

- name: "download asdf binary"
  get_url:
    url: "https://github.com/asdf-vm/asdf/releases/download/{{ asdf_version }}/asdf_{{ asdf_version }}_{{ asdf_os }}_{{ asdf_arch }}.tar.gz"
    dest: "/tmp/asdf_{{ asdf_version }}.tar.gz"
    mode: 0644
  become: True

- name: "extract asdf binary"
  unarchive:
    src: "/tmp/asdf_{{ asdf_version }}.tar.gz"
    dest: "{{ asdf_dir }}"
    remote_src: yes
    owner: "{{ asdf_user }}"
    group: "{{ asdf_group }}"
  become: True

- name: "cleanup asdf download"
  file:
    path: "/tmp/asdf_{{ asdf_version }}.tar.gz"
    state: absent
  become: True

- name: "create asdf bin symlink directory"
  file:
    path: "/usr/local/bin"
    state: directory
    mode: 0755
  become: True

- name: "symlink asdf binary to /usr/local/bin"
  file:
    src: "{{ asdf_dir }}/bin/asdf"
    dest: "/usr/local/bin/asdf"
    state: link
  become: True

- name: "source asdf script"
  template:
    src: "asdf.sh.j2"
    dest: "/etc/profile.d/asdf.sh"
    owner: "root"
    group: "root"
    mode: 0755
  become: True
